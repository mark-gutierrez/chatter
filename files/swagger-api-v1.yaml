openapi: 3.0.3
info:
    title: Chatter API
    description: "Chatter API by Mark Gutierrez"
    version: "1.0"
servers:
    - url: https://web-medical-booking.herokuapp.com/api/v1
      description: production
    - url: http://localhost:3000/api/v1
      description: development
paths:
    /auth/register:
        post:
            tags:
                - auth
            summary: Register
            operationId: Register
            parameters: []
            requestBody:
                content:
                    application/x-www-form-urlencoded:
                        encoding: {}
                        schema:
                            required:
                                - email
                                - password
                                - username
                            type: object
                            properties:
                                email:
                                    type: string
                                    example: "user1@gmail.com"
                                    pattern: '^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
                                password:
                                    type: string
                                    example: "User1234!"
                                    description: "Must have minimum eight characters, at least one upper case English letter, one lower case English letter, one number and one special character"
                                    pattern: "^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$ %^&*-]).{8,}$"
                                username:
                                    type: string
                                    example: "user1"
                                    minLength: 1
                                    maxLength: 320
                                    pattern: "^[A-Za-z-]+$"
                required: false
            responses:
                "201":
                    description: "Successfully Created User"
                    headers: {}
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    user_uid:
                                        type: string
                                        example: "2c1f0991-1c1f-46f2-b25b-e0a063855430"
                                    email:
                                        type: string
                                        example: "user1@gmail.com"
                                    password:
                                        type: string
                                        example: "$2a$10$tFpxda8FuEQo5FjIahZI9uSsGv3E.eKzH/V1gciov5yXfM0NJWCjW"
                                    datetime:
                                        type: string
                                        example: "2023-05-17T06:48:13.027Z"
                                    username:
                                        type: string
                                        example: "user1"
                                    token:
                                        type: string
                                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2MTc2ODJjMDFjOTZlZmM0NjE1NGIwNDkiLCJlbWFpbCI6ImRvY3RvcjFAZ21haWwuY29tIiwicm9sZSI6ImRvY3RvciIsIm5hbWUiOiJ1c2VyIiwic3VybmFtZSI6Im9uZSIsImlhdCI6MTYzNTE1NjY3MiwiZXhwIjoxNjM3NzQ4NjcyfQ.9FcHX5E5FX4s8pXppwtwTi4LyczdQV7xag5INty84Yk"
                "500":
                    description: "Email already exists"
                    headers: {}
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    statusCode:
                                        type: number
                                        example: 500
                                    code:
                                        type: string
                                        example: "23505"
                                    error:
                                        type: string
                                        example: "Internal Server Error"
                                    message:
                                        type: string
                                        example: 'duplicate key value violates unique constraint "users_email_key"'
            deprecated: false
            security: []
    /auth/login:
        post:
            tags:
                - auth
            summary: Login
            operationId: Login
            parameters: []
            requestBody:
                content:
                    application/x-www-form-urlencoded:
                        encoding: {}
                        schema:
                            required:
                                - email
                                - password
                            type: object
                            properties:
                                email:
                                    type: string
                                    example: "user1@gmail.com"
                                password:
                                    type: string
                                    example: "User1234!"
                required: false
            responses:
                "200":
                    description: "Logged in Successfully"
                    headers: {}
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    user_uid:
                                        type: string
                                        example: "2c1f0991-1c1f-46f2-b25b-e0a063855430"
                                    email:
                                        type: string
                                        example: "user1@gmail.com"
                                    password:
                                        type: string
                                        example: "$2a$10$tFpxda8FuEQo5FjIahZI9uSsGv3E.eKzH/V1gciov5yXfM0NJWCjW"
                                    datetime:
                                        type: string
                                        example: "2023-05-17T06:48:13.027Z"
                                    username:
                                        type: string
                                        example: "user1"
                                    token:
                                        type: string
                                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2MTc2ODJjMDFjOTZlZmM0NjE1NGIwNDkiLCJlbWFpbCI6ImRvY3RvcjFAZ21haWwuY29tIiwicm9sZSI6ImRvY3RvciIsIm5hbWUiOiJ1c2VyIiwic3VybmFtZSI6Im9uZSIsImlhdCI6MTYzNTE1NjY3MiwiZXhwIjoxNjM3NzQ4NjcyfQ.9FcHX5E5FX4s8pXppwtwTi4LyczdQV7xag5INty84Yk"
                "401":
                    description: "Invalid Login Credentials"
                    headers: {}
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    statusCode:
                                        type: number
                                        example: 401
                                    error:
                                        type: string
                                        example: "Unauthorized"
                                    message:
                                        type: string
                                        example: "Invalid Login Credentials"
            deprecated: false
            security: []
    /users:
        get:
            tags:
                - users
            summary: Get All Users
            operationId: GetAllUsers
            parameters:
                - name: user_uid
                  in: query
                  required: false
                  schema:
                      type: string
                      format: uuid
                - name: email
                  in: query
                  required: false
                  schema:
                      type: string
                      pattern: '^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
                - name: username
                  in: query
                  required: false
                  schema:
                      type: string
                      minLength: 1
                - name: datetime
                  in: query
                  required: false
                  description: "Accepts JSON in as string | possible keys ( gt, gte, lt, lte ) representing ( >, >=, <, <= )"
                  schema:
                      type: string
                      example: '{"lte":"2023-05-17T07:34:50.953Z", "gt":"2023-05-17T06:48:13.027Z"}'
                - name: select
                  in: query
                  required: false
                  description: "By default the query return all fields on the schema, defining a select field(s) will return on these field(s). Select filters can be chained using the ( , ) operator | NO SPACES"
                  schema:
                      type: string
                      example: "username,email"
                - name: sort
                  in: query
                  required: false
                  description: "This will sort the returning items in either numeric or alphabetic and can be inversed by adding a ( - ) operator prefixing the field. Sort filters can be chained using the ( , ) operator | NO SPACES"
                  schema:
                      type: string
                      example: "username,-email"
                - name: page
                  in: query
                  required: false
                  description: "By default the return data is segmetented depending on the limit of return and will return the first segment on the database. If the page value is 5 it will return the 5th segment of the database"
                  schema:
                      type: string
                      pattern: "^[0-9]+$"
                - name: limit
                  in: query
                  required: false
                  description: "By default the return data is 10 items. Setting the limit field to 100 will return 100 items."
                  schema:
                      type: string
                      pattern: "^[0-9]+$"
            responses:
                "200":
                    description: "Logged in Successfully"
                    headers: {}
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    data:
                                        type: array
                                        items:
                                            type: object
                                            properties:
                                                user_uid:
                                                    type: string
                                                    example: "1b7b2675-5b55-47eb-b433-821549b7a601"
                                                email:
                                                    type: string
                                                    example: "user@gmail.com"
                                                datetime:
                                                    type: string
                                                    example: "2023-05-17T07:34:50.953Z"
                                                username:
                                                    type: string
                                                    example: "user1"
            deprecated: false
    /users/{id}:
        parameters:
            - in: path
              name: id
              schema:
                  type: string
                  format: uuid
              required: true
              description: The user ID
        patch:
            tags:
                - users
            summary: Update User
            operationId: UpdateUser
            parameters: []
            requestBody:
                content:
                    application/x-www-form-urlencoded:
                        encoding: {}
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    example: user@gmail.com
                                    pattern: '^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
                                username:
                                    type: string
                                    example: Robert
                                    minLength: 1
                                    maxLength: 320
                required: false
            responses:
                "200":
                    description: ""
                    headers: {}
            deprecated: false
        delete:
            tags:
                - users
            summary: Delete User
            operationId: DeleteUser
            parameters: []
            responses:
                "200":
                    description: ""
                    headers: {}
            deprecated: false
    /conversations:
        get:
            tags:
                - conversations
            summary: Get All Conversation
            operationId: GetAllConversation
            parameters:
                - name: conversation_uid
                  in: query
                  required: false
                  schema:
                      type: string
                - name: datetime
                  in: query
                  required: false
                  description: "Accepts JSON in as string | possible keys ( gt, gte, lt, lte ) representing ( >, >=, <, <= )"
                  schema:
                      type: string
                      example: '{"lte":"2023-05-17T07:34:50.953Z", "gt":"2023-05-17T06:48:13.027Z"}'
                - name: select
                  in: query
                  required: false
                  description: "By default the query return all fields on the schema, defining a select field(s) will return on these field(s). Select filters can be chained using the ( , ) operator | NO SPACES"
                  schema:
                      type: string
                      example: "conversation_uid"
                - name: sort
                  in: query
                  required: false
                  description: "This will sort the returning items in either numeric or alphabetic and can be inversed by adding a ( - ) operator prefixing the field. Sort filters can be chained using the ( , ) operator | NO SPACES"
                  schema:
                      type: string
                      example: "-conversation_uid"
                - name: page
                  in: query
                  required: false
                  description: "By default the return data is segmetented depending on the limit of return and will return the first segment on the database. If the page value is 5 it will return the 5th segment of the database"
                  schema:
                      type: string
                      pattern: "^[0-9]+$"
                - name: limit
                  in: query
                  required: false
                  description: "By default the return data is 10 items. Setting the limit field to 100 will return 100 items."
                  schema:
                      type: string
                      pattern: "^[0-9]+$"
            responses:
                "200":
                    description: ""
                    headers: {}
            deprecated: false
        post:
            tags:
                - conversations
            summary: Create Conversation
            operationId: CreateConversation
            parameters: []
            requestBody:
                content:
                    application/x-www-form-urlencoded:
                        encoding: {}
                        schema:
                            type: object

                required: false
            responses:
                "200":
                    description: ""
                    headers: {}
            deprecated: false
    /conversations/{id}:
        parameters:
            - in: path
              name: id
              schema:
                  type: string
                  format: uuid
              required: true
              description: The conversation ID
        delete:
            tags:
                - conversations
            summary: Delete Conversation
            operationId: DeleteConversation
            parameters: []
            responses:
                "200":
                    description: ""
                    headers: {}
            deprecated: false
    /user_conversation:
        get:
            tags:
                - user_conversation
            summary: Get All User_Conversations
            operationId: GetAllUser_Conversations
            parameters:
                - name: user_uid
                  in: query
                  required: false
                  schema:
                      type: string
                - name: conversation_uid
                  in: query
                  required: false
                  schema:
                      type: string
                - name: select
                  in: query
                  required: false
                  description: "By default the query return all fields on the schema, defining a select field(s) will return on these field(s). Select filters can be chained using the ( , ) operator | NO SPACES"
                  schema:
                      type: string
                      example: "conversation_uid"
                - name: sort
                  in: query
                  required: false
                  description: "This will sort the returning items in either numeric or alphabetic and can be inversed by adding a ( - ) operator prefixing the field. Sort filters can be chained using the ( , ) operator | NO SPACES"
                  schema:
                      type: string
                      example: "-conversation_uid"
                - name: page
                  in: query
                  required: false
                  description: "By default the return data is segmetented depending on the limit of return and will return the first segment on the database. If the page value is 5 it will return the 5th segment of the database"
                  schema:
                      type: string
                      pattern: "^[0-9]+$"
                - name: limit
                  in: query
                  required: false
                  description: "By default the return data is 10 items. Setting the limit field to 100 will return 100 items."
                  schema:
                      type: string
                      pattern: "^[0-9]+$"
            responses:
                "200":
                    description: ""
                    headers: {}
            deprecated: false
        post:
            tags:
                - user_conversation
            summary: Create User_Conversations
            operationId: CreateUser_Conversations
            parameters: []
            requestBody:
                content:
                    application/x-www-form-urlencoded:
                        encoding: {}
                        schema:
                            required:
                                - user_uid
                                - conversation_uid
                            type: object
                            properties:
                                user_uid:
                                    type: string
                                    format: uuid
                                    example: ""
                                conversation_uid:
                                    type: string
                                    format: uuid
                                    example: ""
                required: false
            responses:
                "200":
                    description: ""
                    headers: {}
            deprecated: false
    /messages:
        get:
            tags:
                - messages
            summary: Get All Messages
            operationId: GetAllMessages
            parameters:
                - name: message_uid
                  in: query
                  required: false
                  schema:
                      type: string
                      format: uuid
                - name: text
                  in: query
                  required: false
                  schema:
                      type: string
                      minLength: 1
                - name: datetime
                  in: query
                  required: false
                  description: "Accepts JSON in as string | possible keys ( gt, gte, lt, lte ) representing ( >, >=, <, <= )"
                  schema:
                      type: string
                      example: '{"lte":"2023-05-17T07:34:50.953Z", "gt":"2023-05-17T06:48:13.027Z"}'
                - name: user_uid
                  in: query
                  required: false
                  schema:
                      type: string
                      format: uuid
                - name: conversation_uid
                  in: query
                  required: false
                  schema:
                      type: string
                      format: uuid
                - name: select
                  in: query
                  required: false
                  description: "By default the query return all fields on the schema, defining a select field(s) will return on these field(s). Select filters can be chained using the ( , ) operator | NO SPACES"
                  schema:
                      type: string
                      example: "text,message_uid"
                - name: sort
                  in: query
                  required: false
                  description: "This will sort the returning items in either numeric or alphabetic and can be inversed by adding a ( - ) operator prefixing the field. Sort filters can be chained using the ( , ) operator | NO SPACES"
                  schema:
                      type: string
                      example: "-datetime"
                - name: page
                  in: query
                  required: false
                  description: "By default the return data is segmetented depending on the limit of return and will return the first segment on the database. If the page value is 5 it will return the 5th segment of the database"
                  schema:
                      type: string
                      pattern: "^[0-9]+$"
                - name: limit
                  in: query
                  required: false
                  description: "By default the return data is 10 items. Setting the limit field to 100 will return 100 items."
                  schema:
                      type: string
                      pattern: "^[0-9]+$"
            responses:
                "200":
                    description: ""
                    headers: {}
            deprecated: false
        post:
            tags:
                - messages
            summary: Create Message
            operationId: CreateMessage
            parameters: []
            requestBody:
                content:
                    application/x-www-form-urlencoded:
                        encoding: {}
                        schema:
                            required:
                                - user_uid
                                - conversation_uid
                                - text
                            type: object
                            properties:
                                user_uid:
                                    type: string
                                    format: uuid
                                conversation_uid:
                                    type: string
                                    format: uuid
                                text:
                                    type: string
                                    minLength: 1
                required: false
            responses:
                "200":
                    description: ""
                    headers: {}
            deprecated: false
    /messages/{id}:
        parameters:
            - in: path
              name: id
              schema:
                  type: string
                  format: uuid
              required: true
              description: The messages ID
        patch:
            tags:
                - messages
            summary: Update Message
            operationId: UpdateMessage
            parameters: []
            requestBody:
                content:
                    application/x-www-form-urlencoded:
                        encoding: {}
                        schema:
                            required:
                                - text
                            type: object
                            properties:
                                text:
                                    type: string
                                    minLength: 1
                required: false
            responses:
                "200":
                    description: ""
                    headers: {}
            deprecated: false
        delete:
            tags:
                - messages
            summary: Delete Message
            operationId: DeleteMessage
            parameters: []
            responses:
                "200":
                    description: ""
                    headers: {}
            deprecated: false
components:
    securitySchemes:
        httpBearer:
            type: http
            scheme: bearer
security:
    - httpBearer: []
tags:
    - name: auth
    - name: users
    - name: conversations
    - name: user_conversation
    - name: messages
